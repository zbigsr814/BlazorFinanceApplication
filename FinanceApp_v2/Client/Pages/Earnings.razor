@page "/earnings"
@using FinanceApp_v2.Client.Components;
@using System.Globalization;
@inject HttpClient Http;

<div class="row">
	<div class="col-lg-8">
		<div class="card">
			<div class="card-header">
				Earnings
			</div>
			<div class="card-body">
				<table class="table table-striped">
					<thread>
						<tr>
							<th>Date</th>
							<th>Category</th>
							<th>Subject</th>
							<th>Amount</th>
							<th>&nbsp;</th>
						</tr>
					</thread>
					<tbody>
						@if (earnings == null)
						{
							<tr><td><em>Loading...</em></td></tr>
						}
						else
						{
							@foreach (var earning in earnings)
							{
								<tr>
									<td>@earning.Date.ToShortDateString()</td>
									<td>@earning.Category</td>
									<td>@earning.Subject</td>
									<td>@earning.Amount.ToString("C2", CultureInfo.CreateSpecificCulture("en-US"))</td>
									<td><button type="button" class="btn btn-danger btn-sm" @onclick="() => OpenDeleteDialog(earning)">Delete</button></td>
								</tr>
							}
						}
					</tbody>
				</table>
			</div>
		</div>
	</div>
	<div class="col-lg-4">
		<EarningForm OnSubmitCallback="@Refresh"></EarningForm>
	</div>
</div>
<div>&nbsp</div>
@if (DeleteDialogOpen)
{
	<ModalDialog Title="Delete item." Text="Are you sure?" OnClose=@OnDeleteDialogClose DialogType="ModalDialog.ModalDialogType.DeleteCancel"></ModalDialog>
}

@code {
	private Earning[] earnings;
	private Earning _earningToDelete;

	public bool DeleteDialogOpen { get; set; }

	public void OpenDeleteDialog(Earning earning)
	{
		DeleteDialogOpen = true;
		_earningToDelete = earning;
		StateHasChanged();
	}

	public async Task OnDeleteDialogClose(bool accepted)
	{
		if (accepted)
		{
			await Http.DeleteAsync($"api/earnings/{_earningToDelete.Id}");
			await LoadData();
			_earningToDelete = null;
		}
		
		DeleteDialogOpen = false;
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	private async Task LoadData()
	{
		earnings = await Http.GetFromJsonAsync<Earning[]>("api/earnings");
		StateHasChanged();
	}

	public async Task Refresh()
	{
		await LoadData();
	}
}
